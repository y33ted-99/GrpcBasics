@page "/students"
@using GrpcStudentsClient
@inject StudentRemote.StudentRemoteClient StudentClient
@inject NavigationManager Navigation

<h3>Student List</h3>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else if (!students.Any())
{
    <p>No students available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Student ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>School</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.StudentId</td>
                    <td>@student.FirstName</td>
                    <td>@student.LastName</td>
                    <td>@student.School</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() => EditStudent(student.StudentId))">Edit</button>
                        <button class="btn btn-danger" @onclick="(() => DeleteStudent(student.StudentId))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<StudentModel> students;

    protected override async Task OnInitializedAsync()
    {
        var response = await StudentClient.RetrieveAllStudentsAsync(new Empty());
        students = response.Items.ToList();
    }

    private void EditStudent(int studentId)
    {
        Navigation.NavigateTo($"/edit-student/{studentId}");
    }

    private async Task DeleteStudent(int studentId)
    {
        var response = await StudentClient.DeleteStudentAsync(new StudentLookupModel { StudentId = studentId });
        if (response.IsOk)
        {
            students = students.Where(s => s.StudentId != studentId).ToList();
        }
        else
        {
            Console.WriteLine(response.Result);
        }
    }
}
